// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class nft extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save nft entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type nft must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("nft", id.toString(), this);
    }
  }

  static load(id: string): nft | null {
    return changetype<nft | null>(store.get("nft", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner_address(): string {
    let value = this.get("owner_address");
    return value!.toString();
  }

  set owner_address(value: string) {
    this.set("owner_address", Value.fromString(value));
  }

  get contract_address(): string {
    let value = this.get("contract_address");
    return value!.toString();
  }

  set contract_address(value: string) {
    this.set("contract_address", Value.fromString(value));
  }

  get token_id(): string {
    let value = this.get("token_id");
    return value!.toString();
  }

  set token_id(value: string) {
    this.set("token_id", Value.fromString(value));
  }

  get metadata_url(): string {
    let value = this.get("metadata_url");
    return value!.toString();
  }

  set metadata_url(value: string) {
    this.set("metadata_url", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get attributes(): string {
    let value = this.get("attributes");
    return value!.toString();
  }

  set attributes(value: string) {
    this.set("attributes", Value.fromString(value));
  }

  get tx_hash(): string {
    let value = this.get("tx_hash");
    return value!.toString();
  }

  set tx_hash(value: string) {
    this.set("tx_hash", Value.fromString(value));
  }
}
